@using MUNity.Database.General
@using MUNity.ViewModels.ListOfSpeakers

@inject Services.ListOfSpeakersService losService
@inject ILogger<LoSQuestionsComponent> logger

<div class="card border-0 mb-3 bg-gray-900 text-white">
	<!-- BEGIN card-body -->
	<div class="card-body" style="@bgFlagStype">
		<!-- BEGIN title -->
		<span class="mb-10px" style="font-size: 24px">
			@(ViewModel.CurrentQuestion?.Name ?? "-") 
			@if (ViewModel.CurrentQuestion != null && AllowEdit)
			{
				<i class="ml-3 fa fa-times-circle cursor-pointer" @onclick="ViewModel.ClearCurrentQuestion"></i>	
			}
		</span>
		<br />
		<!-- Remaining speaker time -->
		@if (AllowEdit && ViewModel.Status == ESpeakerListStatus.Question)
		{
			<span class="text-danger cursor-pointer" @onclick="() => ViewModel.AddQuestionSeconds(-10)">-00:10</span>	
		}
		<span class="mb-10px" style="font-size: 24px">@ViewModel.RemainingQuestionTime.Minutes.ToString("D2"):@ViewModel.RemainingQuestionTime.Seconds.ToString("D2")</span>
		
		@if (AllowEdit && ViewModel.Status == ESpeakerListStatus.Question)
		{
			<span class="text-success cursor-pointer" @onclick="() => ViewModel.AddQuestionSeconds(10)">+00:10</span>
		}

		<br />
		<!-- Total available question time -->

		@if (AllowEdit && !editQuestionTime)
		{
			<a href="javascript:;" class="editable editable-click" @onclick="() => editQuestionTime = true">@questionTimeString</a>
		}
		else if (AllowEdit && editQuestionTime)
		{
			<div class="input-group w-50">
				<input class="form-control" @bind=@inputQuestionTime />
				<button class="btn btn-primary" @onclick=UpdateQuestionTime>Speichern</button>
			</div>
		}
		else 
		{
			<div class="text-gray-500 mb-1px">@questionTimeString</div>
		}

	</div>
	<!-- END card-body -->
	<!-- BEGIN widget-list -->
	<div class="widget-list rounded-bottom inverse-mode">
		<!-- BEGIN widget-list-item -->
	

		@foreach(var question in ViewModel.Questions)
		{
			<div class="widget-list-item rounded-0 pt-3px">
				<div class="widget-list-media icon">
					<div class="widget-img widget-img-xs rounded bg-inverse me-2 w-40px" style="background-image: url(@($"/img/flags/small/{question.Iso.ToLower()}.png"))"></div>	
				</div>
				<div class="widget-list-content">
					<div class="widget-list-title">@question.Name</div>
				</div>
				@if (AllowEdit)
				{
					<div class="widget-list-action text-nowrap text-gray-500">
						@if (ViewModel.Questions.Any() && ViewModel.Questions.First() == question)
						{
							<button class="btn btn-sm btn-primary" @onclick="() => ViewModel.NextQuestion()"><i class="fa fa-arrow-up"></i></button>
							@if (ViewModel.Questions.Any() && ViewModel.Questions.LastOrDefault() != question)
							{
								<button class="btn btn-sm btn-inverse" @onclick="() => MoveDown(question)"><i class="fa fa-arrow-down"></i></button>	
							}	
						}
						else 
						{
							<button class="btn btn-sm btn-inverse" @onclick="() => MoveUp(question)"><i class="fa fa-arrow-up"></i></button>	
							@if (ViewModel.Questions.Any() && ViewModel.Questions.LastOrDefault() != question)
							{
								<button class="btn btn-sm btn-inverse" @onclick="() => MoveDown(question)"><i class="fa fa-arrow-down"></i></button>	
							}
						}
						<button class="btn btn-sm btn-danger" @onclick="() => ViewModel.RemoveQuestion(question.Id)"><i class="fa fa-trash"></i></button>
					</div>
				}
				
			</div>
		}

		<div class="widget-list-item rounded-0 pt-3px bg-black-800">
				<div class="widget-list-media icon">
					<i class="fa @((ViewModel.QuestionsClosed) ? "fa-lock " : "fa-lock-open") bg-indigo text-white"></i>
				</div>
				<div class="widget-list-content">
					<div class="widget-list-title">Status</div>
				</div>
				@if (AllowEdit)
				{
					<div class="widget-list-action text-nowrap text-gray-500">
						<RadzenSwitch @bind-Value=questionsOpened />
					</div>
				}
			</div>

			@if (AllowEdit)
			{
				<div class="widget-list-item rounded-0 pt-3px bg-black-800">
					<div class="widget-list-media icon" @onclick="AddToQuestions">
						<i class="fa fa-plus bg-success text-white"></i>
					</div>
					<div class="widget-list-content">
						<RadzenAutoComplete Data=@KnownCountries TextProperty="Name" Style="width: 100%;" @bind-Value=@newQuestionName 
						@onkeyup="selectCountryKey" />
					</div>
				</div>
			}
			

		
		<!-- END widget-list-item -->
	</div>
	<!-- END widget-list -->
</div>

@code {
	[Parameter] public ViewModels.ListOfSpeakers.ListOfSpeakersViewModel ViewModel { get; set; }

	[Parameter] public List<Country> KnownCountries { get; set; }

	[Parameter] public bool AllowEdit { get; set; } = true;

	private string newQuestionName = "";

	private bool editQuestionTime = false;

	private string inputQuestionTime;

	private string questionTimeString => $"{ViewModel.QuestionTime.Minutes.ToString("D2")}:{ViewModel.QuestionTime.Seconds.ToString("D2")}";
	private void selectCountryKey(KeyboardEventArgs args)
	{
		if (args.Key == "Enter")
		{
			AddToQuestions();
		}
	}

	private void UpdateQuestionTime()
	{
		if (TimeSpan.TryParseExact(inputQuestionTime, "m\\:ss",null, out var ts))
		{
			losService.UpdateQuestionsTime(ViewModel.ListOfSpeakersId, ts);
			this.editQuestionTime = false;
		}
		else
		{
			logger?.LogWarning("Was unable to parse input Timespan '{0}'", inputQuestionTime);
		}
	}

	private void AddToQuestions()
	{
		if (ViewModel != null && !string.IsNullOrEmpty(newQuestionName))
		{
			var foundCountry = KnownCountries.Where(n => string.Equals(n.Name, newQuestionName, StringComparison.OrdinalIgnoreCase)).FirstOrDefault();
			var foundCountryName = KnownCountries.Where(n => string.Equals(n.Name, newQuestionName, StringComparison.OrdinalIgnoreCase)).Select(n => n.Name).FirstOrDefault() ?? newQuestionName;;
			losService.AddQuestion(ViewModel.ListOfSpeakersId, foundCountryName, foundCountry?.Iso ?? "un");
			newQuestionName = "";
		}
	}

	private void MoveUp(SpeakerViewModel speaker)
	{
		if (ViewModel != null)
		{
			losService.MoveSpeakerUp(ViewModel.ListOfSpeakersId, speaker);
		}
	}

	private void MoveDown(SpeakerViewModel speaker)
	{
		if (ViewModel != null)
		{
			losService.MoveSpeakerDown(ViewModel.ListOfSpeakersId, speaker);
		}
	}

	private int randomImageIndex = -1;

	private string bgFlagStype
	{
		get
		{
			if (ViewModel?.CurrentQuestion == null)
			{
				return $"background: no-repeat bottom right; background-image: url(/img/flags/medium/un.png); background-size: auto 100%;";
			}
			else
			{
				return $"background: no-repeat bottom right; background-image: url(/img/flags/medium/{ViewModel.CurrentQuestion.Iso.ToLower()}.png); background-size: auto 100%;";
				
			}
		}
	}

	private bool questionsOpened
    {
        get
        {
            return !ViewModel.QuestionsClosed;
        }
        set
        {
            ViewModel.QuestionsClosed = !value;
        }
    }

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		this.inputQuestionTime = questionTimeString;
		if (this.ViewModel != null)
		{
			this.ViewModel.PropertyChanged += delegate { InvokeAsync(StateHasChanged); };
		}
	}
}
