@using MUNity.Database.General
@using MUNity.Database.Models.LoS
@using MUNity.ViewModels.ListOfSpeakers
@using MUNityBase.Interfances

@inject Services.ListOfSpeakersService losService
@inject ILogger<LoSSpeakersComponent> logger

<div class="card border-0 mb-3 bg-gray-900 text-white">
	<!-- BEGIN card-body -->
	<div class="card-body" style="@bgFlagStype">
		<!-- BEGIN title -->
		<span class="mb-10px" style="font-size: 24px">
			@(ViewModel.CurrentSpeaker?.Name ?? "-") 
			@if (ViewModel.CurrentSpeaker != null && AllowEdit)
			{
				<i class="ml-3 fa fa-times-circle cursor-pointer" @onclick="ViewModel.ClearCurrentSpeaker"></i>	
			}
		</span>
		<br />
		<!-- Remaining speaker time -->
		@if (AllowEdit && ViewModel.Status == ESpeakerListStatus.Speaking)
		{
			<span class="text-danger cursor-pointer" @onclick="() => ViewModel.AddSpeakerSeconds(-10)">-00:10</span>	
		}
		<span class="mb-10px" style="font-size: 24px">@ViewModel.RemainingSpeakerTime.Minutes.ToString("D2"):@ViewModel.RemainingSpeakerTime.Seconds.ToString("D2")</span>
		
		@if (AllowEdit && ViewModel.Status == ESpeakerListStatus.Speaking)
		{
			<span class="text-success cursor-pointer" @onclick="() => ViewModel.AddSpeakerSeconds(10)">+00:10</span>
		}

		<br />
		<!-- Total available speaker time -->

		@if (AllowEdit && !editSpeakerTime)
		{
			<a href="javascript:;" class="editable editable-click" @onclick="() => editSpeakerTime = true">@speakerTimeString</a>
		}
		else if (AllowEdit && editSpeakerTime)
		{
			<div class="input-group w-50">
				<input class="form-control" type="text" @bind=@inputSpeakerTime />
				<button class="btn btn-primary" @onclick="UpdateSpeakerTime">Speichern</button>
			</div>
			
		}
		else 
		{
			<div class="text-gray-500 mb-1px">@speakerTimeString</div>
		}

	</div>
	<!-- END card-body -->
	<!-- BEGIN widget-list -->
	<div class="widget-list rounded-bottom inverse-mode">
		<!-- BEGIN widget-list-item -->
	

		@foreach(var speaker in ViewModel.Speakers)
		{
			<div class="widget-list-item rounded-0 pt-3px">
				<div class="widget-list-media icon">
					<div class="widget-img widget-img-xs rounded bg-inverse me-2 w-40px" style="background-image: url(@($"/img/flags/small/{speaker.Iso.ToLower()}.png"))"></div>	
				</div>
				<div class="widget-list-content">
					<div class="widget-list-title">@speaker.Name</div>
				</div>
				@if (AllowEdit)
				{
					<div class="widget-list-action text-nowrap text-gray-500">
						@if (ViewModel.Speakers.Any() && ViewModel.Speakers.First() == speaker)
						{
							<button class="btn btn-sm btn-primary" @onclick="() => ViewModel.NextSpeaker()"><i class="fa fa-arrow-up"></i></button>	
							@if (ViewModel.Speakers.Any() && ViewModel.Speakers.Last() != speaker)
							{
								<button class="btn btn-sm btn-inverse" @onclick="() => MoveDown(speaker)"><i class="fa fa-arrow-down"></i></button>	
							}
						}
						else 
						{
							<button class="btn btn-sm btn-inverse" @onclick="() => MoveUp(speaker)"><i class="fa fa-arrow-up"></i></button>	
							@if (ViewModel.Speakers.Any() && ViewModel.Speakers.Last() != speaker)
							{
								<button class="btn btn-sm btn-inverse" @onclick="() => MoveDown(speaker)"><i class="fa fa-arrow-down"></i></button>	
							}
						}
						<button class="btn btn-sm btn-danger" @onclick="() => ViewModel.RemoveSpeaker(speaker.Id)"><i class="fa fa-trash"></i></button>
					</div>
				}
				
			</div>
		}

		<div class="widget-list-item rounded-0 pt-3px bg-black-800">
				<div class="widget-list-media icon">
					<i class="fa @((ViewModel.ListClosed) ? "fa-lock " : "fa-lock-open") bg-indigo text-white"></i>
				</div>
				<div class="widget-list-content">
					<div class="widget-list-title">Status</div>
				</div>
				@if (AllowEdit)
				{
					<div class="widget-list-action text-nowrap text-gray-500">
						<RadzenSwitch @bind-Value=speakersOpened />
					</div>
				}
			</div>

			@if (AllowEdit)
			{
				<div class="widget-list-item rounded-0 pt-3px bg-black-800">
					<div class="widget-list-media icon" @onclick="AddToSpeakers">
						<i class="fa fa-plus bg-success text-white"></i>
					</div>
					<div class="widget-list-content">
						<RadzenAutoComplete Data=@KnownCountries TextProperty="Name" Style="width: 100%;" @bind-Value=@newSpeakerName 
						@onkeyup="selectCountryKey" />
					</div>
				</div>
			}
			

		
		<!-- END widget-list-item -->
	</div>
	<!-- END widget-list -->
</div>

@code {
	[Parameter] public ViewModels.ListOfSpeakers.ListOfSpeakersViewModel ViewModel { get; set; }

	[Parameter] public List<Country> KnownCountries { get; set; }

	[Parameter] public bool AllowEdit { get; set; } = true;

	private string newSpeakerName = "";

	private bool editSpeakerTime = false;

	private string inputSpeakerTime;

	private void UpdateSpeakerTime()
	{
		if (TimeSpan.TryParseExact(inputSpeakerTime, "m\\:ss",null, out var ts))
		{
			losService.UpdateSpeakerTime(ViewModel.ListOfSpeakersId, ts);
			this.editSpeakerTime = false;
		}
		else
		{
			logger?.LogWarning("Was unable to parse input Timespan '{0}'", inputSpeakerTime);
		}
	}

	private string speakerTimeString => $"{ViewModel.SpeakerTime.Minutes.ToString("D2")}:{ViewModel.SpeakerTime.Seconds.ToString("D2")}";
	private void selectCountryKey(KeyboardEventArgs args)
	{
		if (args.Key == "Enter")
		{
			AddToSpeakers();
		}
	}

	private void AddToSpeakers()
	{
		if (ViewModel != null && !string.IsNullOrEmpty(newSpeakerName))
		{
			var foundCountry = KnownCountries.Where(n => string.Equals(n.Name, newSpeakerName, StringComparison.OrdinalIgnoreCase)).FirstOrDefault();
			var foundCountryName = KnownCountries.Where(n => string.Equals(n.Name, newSpeakerName, StringComparison.OrdinalIgnoreCase)).Select(n => n.Name).FirstOrDefault() ?? newSpeakerName;;
			losService.AddSpeaker(ViewModel.ListOfSpeakersId, foundCountryName, foundCountry?.Iso ?? "un");
			newSpeakerName = "";
		}
	}

	private void MoveUp(SpeakerViewModel speaker)
	{
		if (ViewModel != null)
		{
			losService.MoveSpeakerUp(ViewModel.ListOfSpeakersId, speaker);
		}
	}

	private void MoveDown(SpeakerViewModel speaker)
	{
		if (ViewModel != null)
		{
			losService.MoveSpeakerDown(ViewModel.ListOfSpeakersId, speaker);
		}
	}

	private int randomImageIndex = -1;

	private string bgFlagStype
	{
		get
		{
			if (ViewModel?.CurrentSpeaker == null)
			{
				return $"background: no-repeat bottom right; background-image: url(/img/flags/medium/un.png); background-size: auto 100%;";
			}
			else
			{
				return $"background: no-repeat bottom right; background-image: url(/img/flags/medium/{ViewModel.CurrentSpeaker.Iso.ToLower()}.png); background-size: auto 100%;";

			}
		}
	}

	private bool speakersOpened
	{
		get
		{
			return !ViewModel.ListClosed;
		}
		set
		{
			ViewModel.ListClosed = !value;
		}
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		this.inputSpeakerTime = speakerTimeString;
		if (this.ViewModel != null)
		{
			this.ViewModel.PropertyChanged += delegate { InvokeAsync(StateHasChanged); };
		}
	}
}
