@using MUNity.BlazorServer.BServices
@inject BServices.ResolutionExchangeService resolutionExchangeService
@inject BServices.VirtualCommiteeParticipationService vcParticipationService
@inject ILogger<ResolutionEditorComponent> log

@if (exchange?.Resolution != null)
{
<div class="row">
    <div class="panel panel-inverse col-12">
        <div class="panel-heading">
            @if (!IsReaderMode && ((exchange.Resolution.State == EResolutionStates.Private || 
            exchange.Resolution.State == EResolutionStates.Public) && exchange.Resolution.SubmitterRole?.RoleId == vcParticipationService.RoleId))
            {
                <label class="me-2">Anderen erlauben mit zu schreiben</label>
                <RadzenSwitch @bind-Value=@allowOthersToEdit class="me-2" />
                <button class="btn btn-default" @onclick="SubmitResolution">Einreichen</button>
            }
            else if (!IsReaderMode && exchange.Resolution.State == EResolutionStates.Submitted)
            {
                <h3 class="panel-title">Eingereichte Resolution</h3>
                <AuthorizeView>
                    <Authorized>
                        <button class="btn btn-default me-2" @onclick="() => exchange.ChangeState(EResolutionStates.Private)">An ErstellerIn zurückgeben</button>
                        <button class="btn btn-default me-2" @onclick="() => exchange.ChangeState(EResolutionStates.Public)">Für alle öffnen</button>
                    </Authorized>
                </AuthorizeView>
               
            }
            else if (!IsReaderMode && exchange.Resolution.State == EResolutionStates.Discussion)
            {
                <h3 class="panel-title">Resolution wird behandelt. Änderungsanträge offen.</h3>
            }
            else
            {
                
               <h3>Resolution</h3>
                @if (!IsReaderMode)
                {
                    <AuthorizeView>
                        <Authorized>
                            <button class="btn btn-default btn-sm ms-3" @onclick="SubmitResolution">Einreichen durch Chair-Rechte</button>
                         </Authorized>
                    </AuthorizeView>
                }
            }

            @if (!IsReaderMode)
            {
                 <AuthorizeView>
                    <Authorized>
                        @if (exchange.Resolution.State == EResolutionStates.Submitted || exchange.Resolution.State == EResolutionStates.Discussion)
                        {
                            <label class="me-2">Änderungsanträge erlauben</label>
                            <RadzenSwitch @bind-Value=@setDiscussionMode />
                        }
                    </Authorized>
                </AuthorizeView>   
            }
                
        </div>
    </div>
</div>


    <div class="row">
        <div class="col-12">
            <ResolutionHeaderEditorComponent Exchange=@exchange CanEdit=@CanEdit CommitteeContext=@CommitteeContext />
        </div>
    </div>

    <PreambleEditorComponent Exchange=@exchange CanEdit=@CanEdit IsReaderMode=@IsReaderMode />
    <OperativeSectionComponent Exchange=@exchange CanEdit=@CanEdit CommitteeContext=@CommitteeContext IsReaderMode=@IsReaderMode />

    @if (!IsReaderMode)
    {
        <AuthorizeView>
            <Authorized>
                    <div class="panel panel-inverse">
                        <div class="panel-heading">
                            <h4 class="panel-title">Admin</h4>
                        </div>
                        <div class="panel-body">

                            <div class="row d-flex justify-content-end">
                                <button class="btn btn-danger" @onclick="() => showDeleteWarning = true">Resolution löschen</button>
                            </div>
                        
                        </div>
                    </div>
            </Authorized>
        </AuthorizeView>
    }
    
}
else
{
    <p>Resolution @ResolutionId wird vorbereitet oder nicht gefunden...</p>
}

@if (showDeleteWarning)
{
    <div class="swal-overlay swal-overlay--show-modal" tabindex="-1">
  <div class="swal-modal" role="dialog" aria-modal="true"><div class="swal-icon swal-icon--error">
    <div class="swal-icon--error__x-mark">
      <span class="swal-icon--error__line swal-icon--error__line--left"></span>
      <span class="swal-icon--error__line swal-icon--error__line--right"></span>
    </div>
  </div><div class="swal-title" style="">Resolution Löschen?</div><div class="swal-text" style="">Dieser Vorgang kann nicht rückgängig gemacht werden!</div><div class="swal-footer"><div class="swal-button-container">

    <button class="swal-button swal-button--cancel btn btn-default" @onclick="() => showDeleteWarning = false">Abbrechen</button>

    <div class="swal-button__loader">
      <div></div>
      <div></div>
      <div></div>
    </div>

  </div><div class="swal-button-container">

    <button class="swal-button swal-button--confirm btn btn-danger" @onclick="RemoveResolution">Löschen</button>

    <div class="swal-button__loader">
      <div></div>
      <div></div>
      <div></div>
    </div>

                </div></div></div></div>
}
else
{
    @if (exchange == null)
    {
        <p>Es wurde kein Exchange für diese Resolution '@ResolutionId' erstellt.</p>
    }
    else if (exchange != null && exchange.Resolution == null)
    {
        <p>Ein Exchange für die Resolution wurde erstellt. Jedoch keine Resolution selbst geladen.</p>
    }

}


@code {
    [Parameter] public string ResolutionId { get; set; }

    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; }

    [Parameter] public string CommitteeContext { get; set; }

    [Parameter] public bool IsReaderMode { get; set; }

    private bool isAuthed = false;
    private bool showDeleteWarning = false;
    private bool hasError = false;
    private string errorText = "";

    [Parameter]public bool CanEdit { get; set; }

    private ResolutionExchange exchange;
    private bool allowOthersToEdit
    {
        get
        {
            return this.exchange.Resolution.State == EResolutionStates.Public;
        }
        set
        {
            if (value)
            {
                this.exchange.Resolution.State = EResolutionStates.Public;
                this.exchange.UpdateResaElement();
            }
            else
            {
                this.exchange.Resolution.State = EResolutionStates.Private;
                this.exchange.UpdateResaElement();
            }
        }
    }

    private bool setDiscussionMode
    {
        get
        {
            return this.exchange.Resolution.State == EResolutionStates.Discussion;
        }
        set
        {
            if (value)
            {
                this.exchange.Resolution.State = EResolutionStates.Discussion;
                this.exchange.UpdateResaElement();
            }
            else
            {
                this.exchange.Resolution.State = EResolutionStates.Submitted;
                this.exchange.UpdateResaElement();
            }
        }
    }

    private void SubmitResolution()
    {
        this.exchange.ChangeState(EResolutionStates.Submitted);
    }

    private void LoadEditAuth()
    {
        if (exchange?.Resolution != null && vcParticipationService != null)
        {
            this.CanEdit = (exchange.Resolution.State == EResolutionStates.Public ||
            (exchange.Resolution.State == EResolutionStates.Private && vcParticipationService.RoleId != null && exchange.Resolution.SubmitterRole != null && exchange.Resolution.SubmitterRole.RoleId == vcParticipationService.RoleId)) ||
            isAuthed;
            InvokeAsync(StateHasChanged);
        }
    }

    private void RemoveResolution()
    {
        resolutionExchangeService.RemoveResolution(exchange);
        this.exchange = null;
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            exchange = resolutionExchangeService.GetResolution(ResolutionId);
            if (!CanEdit)
            {
                var taskResult = await AuthStateTask;
                isAuthed = taskResult?.User?.Identity != null && taskResult.User.Identity.IsAuthenticated;
                LoadEditAuth();
            }
            base.OnParametersSet();
            Reload();
        }
        catch (Exception ex)
        {
            log?.LogError(ex, "Unable to load resolution");
            hasError = true;
        }

    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (vcParticipationService != null)
        {
            vcParticipationService.Registered += delegate { LoadEditAuth(); }; 
        }
    }

    public void Reload()
    {
        if (exchange != null)
        {
            exchange = null;
            GC.Collect();
        }



        if (resolutionExchangeService != null)
        {
            exchange = resolutionExchangeService.GetResolution(ResolutionId);
            exchange.ResolutionStateChanged += delegate { InvokeAsync(StateHasChanged); };
            LoadEditAuth();
            
            InvokeAsync(StateHasChanged);
        }
    }
}
